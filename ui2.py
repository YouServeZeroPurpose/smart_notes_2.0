# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.8.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets

import json

data = {}

with open('notes.json', 'r', encoding='utf-8') as file:
    a = json.load(file)
    if str(a) == '{}':
        with open('notes.json', 'w', encoding='utf-8') as file:
            a = {'Початкова замітка': {'текст': '''Це початкова замітка.
Вона буде з'являтися кожен раз, коли ти видаляєш всі замітки. ''', 'теги' : []}}
            json.dump(a, file)

note_name = ''
tag_name = ''

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(700, 600)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.UpArrowCursor))
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(700, 600))
        self.centralwidget.setMaximumSize(QtCore.QSize(700, 600))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 311, 581))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.btn_uscale = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btn_uscale.setFont(font)
        self.btn_uscale.setObjectName("btn_uscale")
        self.horizontalLayout_3.addWidget(self.btn_uscale)
        self.btn_dscale = QtWidgets.QPushButton(parent=self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btn_dscale.setFont(font)
        self.btn_dscale.setObjectName("btn_dscale")
        self.horizontalLayout_3.addWidget(self.btn_dscale)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.text_edit = QtWidgets.QTextEdit(parent=self.verticalLayoutWidget)
        self.text_edit.setObjectName("text_edit")
        self.verticalLayout_4.addWidget(self.text_edit)
        self.widget = QtWidgets.QWidget(parent=self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(330, 10, 361, 581))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.lb_notes = QtWidgets.QLabel(parent=self.widget)
        self.lb_notes.setObjectName("lb_notes")
        self.verticalLayout.addWidget(self.lb_notes)
        self.list_for_notes = QtWidgets.QListWidget(parent=self.widget)
        self.list_for_notes.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        self.list_for_notes.setFont(font)
        self.list_for_notes.setObjectName("list_for_notes")
        self.verticalLayout.addWidget(self.list_for_notes)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.btn_create_note = QtWidgets.QPushButton(parent=self.widget)
        self.btn_create_note.setObjectName("btn_create_note")
        self.horizontalLayout_4.addWidget(self.btn_create_note)
        self.btn_delete_note = QtWidgets.QPushButton(parent=self.widget)
        self.btn_delete_note.setObjectName("btn_delete_note")
        self.horizontalLayout_4.addWidget(self.btn_delete_note)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.btn_save_note = QtWidgets.QPushButton(parent=self.widget)
        self.btn_save_note.setObjectName("btn_save_note")
        self.verticalLayout.addWidget(self.btn_save_note)
        self.lb_tags = QtWidgets.QLabel(parent=self.widget)
        self.lb_tags.setObjectName("lb_tags")
        self.verticalLayout.addWidget(self.lb_tags)
        self.list_for_tags = QtWidgets.QListWidget(parent=self.widget)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(8)
        self.list_for_tags.setFont(font)
        self.list_for_tags.setObjectName("list_for_tags")
        self.verticalLayout.addWidget(self.list_for_tags)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.btn_add_tag = QtWidgets.QPushButton(parent=self.widget)
        self.btn_add_tag.setObjectName("btn_add_tag")
        self.horizontalLayout_6.addWidget(self.btn_add_tag)
        self.btn_delete_tag = QtWidgets.QPushButton(parent=self.widget)
        self.btn_delete_tag.setObjectName("btn_delete_tag")
        self.horizontalLayout_6.addWidget(self.btn_delete_tag)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.btn_search_names = QtWidgets.QPushButton(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.btn_search_names.setFont(font)
        self.btn_search_names.setObjectName("btn_search_names")
        self.verticalLayout.addWidget(self.btn_search_names)
        self.btn_search_tags = QtWidgets.QPushButton(parent=self.widget)
        self.btn_search_tags.setObjectName("btn_search_tags")
        self.verticalLayout.addWidget(self.btn_search_tags)
        self.line_search_tag = QtWidgets.QLineEdit(parent=self.widget)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.line_search_tag.setFont(font)
        self.line_search_tag.setText("")
        self.line_search_tag.setObjectName("line_search_tag")
        self.verticalLayout.addWidget(self.line_search_tag)
        MainWindow.setCentralWidget(self.centralwidget)
        self.show_note()

        self.list_for_notes.itemClicked.connect(self.show)
        self.list_for_notes.itemClicked.connect(self.show_tags)

        self.btn_create_note.clicked.connect(self.add_note)
        self.btn_delete_note.clicked.connect(self.del_note)
        self.btn_save_note.clicked.connect(self.save_note)

        self.btn_add_tag.clicked.connect(self.add_tag)
        self.btn_delete_tag.clicked.connect(self.del_tag)
        self.btn_search_tags.clicked.connect(self.search_by_tag)
        self.btn_search_names.clicked.connect(self.search_by_name)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Smart Notes"))
        self.btn_uscale.setText(_translate("MainWindow", "+"))
        self.btn_dscale.setText(_translate("MainWindow", "-"))
        self.lb_notes.setText(_translate("MainWindow", "Список заміток"))
        self.btn_create_note.setText(_translate("MainWindow", "Створити замітку"))
        self.btn_delete_note.setText(_translate("MainWindow", "Видалити замітку"))
        self.btn_save_note.setText(_translate("MainWindow", "Зберегти замітку"))
        self.lb_tags.setText(_translate("MainWindow", "Список тегів"))
        self.btn_add_tag.setText(_translate("MainWindow", "Додати до замітки"))
        self.btn_delete_tag.setText(_translate("MainWindow", "Відкріпити від замітки"))
        self.btn_search_names.setText(_translate("MainWindow", "Шукати замітки по назві"))
        self.btn_search_tags.setText(_translate("MainWindow", "Шукати замітки по тегу"))
        self.line_search_tag.setPlaceholderText(_translate("MainWindow", "Введіть тег або назву замітки..."))

    def show_note(self):
        global data
        with open('notes.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        self.list_for_notes.addItems(data.keys())

    def show(self):
        self.list_for_tags.clear()
        t = self.list_for_notes.currentItem().text()
        self.text_edit.setText(data[t]['текст'])

    def show_tags(self):
        t = self.list_for_notes.currentItem().text()
        self.list_for_tags.addItems(data[t]['теги'])

    def add_note(self):
        global note_name
        note_name, ok = QtWidgets.QInputDialog.getText(MainWindow, 'Додати замітку', 'Назва замітки')
        if note_name and ok:
            data[note_name] = {'текст': '', 'теги' : []}
            self.list_for_notes.addItem(note_name)
            with open('notes.json', 'w', encoding='utf-8') as file:
                json.dump(data, file, sort_keys=True)

    def del_note(self):
        if self.list_for_notes.currentItem():
            t = self.list_for_notes.currentItem().text()
            del data[t]
            with open('notes.json', 'w', encoding='utf-8') as file:
                json.dump(data, file, sort_keys=True)
            self.list_for_notes.clear()
            self.list_for_notes.addItems(data.keys())
            self.text_edit.clear()  
            self.list_for_tags.clear()
            self.show_tags

    def save_note(self):
        if self.list_for_notes.currentItem():
            edited_text = self.text_edit.toPlainText()
            data[self.list_for_notes.currentItem().text()]['текст'] = edited_text 
            with open('notes.json', 'w', encoding='utf-8') as file:
                json.dump(data, file, sort_keys=True)

    def add_tag(self):
        global tag_name
        tag_name, ok = QtWidgets.QInputDialog.getText(MainWindow, 'Додати тег', 'Назва тегу')
        if self.list_for_notes.currentItem():
            if tag_name and ok:
                if tag_name and not (tag_name in data[self.list_for_notes.currentItem().text()]['теги']):
                    data[self.list_for_notes.currentItem().text()]['теги'].append(tag_name)
                    self.list_for_tags.addItem(tag_name)
                    with open('notes.json', 'w', encoding='utf-8') as file:
                        json.dump(data, file, sort_keys=True)

    def del_tag(self):
        if self.list_for_tags.currentItem():
            data[self.list_for_notes.currentItem().text()]['теги'].remove(self.list_for_tags.currentItem().text())
            with open('notes.json', 'w', encoding='utf-8') as file:
                json.dump(data, file, sort_keys=True)
            self.list_for_tags.clear()
            self.show_tags()

    def search_by_tag(self):
        if self.btn_search_tags.text() == 'Шукати замітки по тегу':
            search = self.line_search_tag.text()
            filtered_notes = {}
            for _ in data.keys():
                if search in data[_]['теги']:
                    filtered_notes[_] = data[_]
            self.list_for_notes.clear()
            self.list_for_tags.clear()
            self.text_edit.clear()
            self.list_for_notes.addItems(filtered_notes.keys())
            self.btn_search_tags.setText('Скинути пошук')
        else:
            self.list_for_notes.clear()
            self.list_for_tags.clear()
            self.text_edit.clear()
            self.show_note()
            self.btn_search_tags.setText('Шукати замітки по тегу')

    def search_by_name(self):
        if self.btn_search_names.text() == 'Шукати замітки по назві':
            search = self.line_search_tag.text()
            self.list_for_notes.clear()
            self.list_for_tags.clear()
            self.text_edit.clear()
            if search in data:
                self.list_for_notes.addItem(search)
            self.btn_search_names.setText('Скинути пошук')
        else:
            self.list_for_notes.clear()
            self.list_for_tags.clear()
            self.text_edit.clear()
            self.show_note()
            self.btn_search_names.setText('Шукати замітки по назві')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
